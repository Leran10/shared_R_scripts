library("dada2")
package.version(dada2)
package.Version(dada2)
packageVersion(dada())
packageVersion("dada2")
lib.path()
libPath()
path.package("dada2")
.libPaths()
?order
mtcars2 <- data.frame(car = rownames(mtcars),
mtcars,
row.names = NULL)
View(mtcars2)
mtcars3 <- mtcars2
# Change the cyl column to factor
mtcars3$cyl <- as.factor(mtcars3$cyl)
# Change the cyl column to factor
mtcars3$cyl <- mtcars2$cyl <- as.factor(mtcars2$cyl)
library(ggplot2)
library(gridExtra)
x <-ggplot(mtcars2, aes(y=car, x=mpg)) +
geom_point(stat="identity")
y <-ggplot(mtcars2, aes(x=car, y=mpg)) +
geom_bar(stat="identity") +
coord_flip()
grid.arrange(x, y, ncol=2)
mtcars[order(mtcars$mpg)]
mtcars[order(mtcars$mpg), ]
levels <- mtcars2[order(mtcars$mpg), "car"]
levels
# Change the cyl column to factor
mtcars3$cyl <- as.factor(mtcars3$cyl)
x <-ggplot(mtcars3, aes(y=car, x=mpg)) +
geom_point(stat="identity")
y <-ggplot(mtcars3, aes(x=car, y=mpg)) +
geom_bar(stat="identity") +
coord_flip()
grid.arrange(x, y, ncol=2)
# create levels
# use the order of mpg column to sort the rows of the car column
levels <- mtcars3[order(mtcars$mpg), "car"]
levels
# change the car column to factor, apply the levels just created to sort appropriately
mtcars3$car <- factor(mtcars3$car, levels = levels)
x <-ggplot(mtcars3, aes(y=car, x=mpg)) +
geom_point(stat="identity")
y <-ggplot(mtcars3, aes(x=car, y=mpg)) +
geom_bar(stat="identity") +
coord_flip()
grid.arrange(x, y, ncol=2)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
),
active = list(
a_field = function(value) {
private$..a_field
}  else {
private&..a_field <- value
}
)
)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
),
active = list(
a_field = function(value) {
if (missing(value)) {
private$..a_field
} else {
private&..a_field <- value
}
)
)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
),
active = list(
a_field = function(value) {
if (missing(value)) {
private$..a_field
} else {
private$..a_field <- value
}
)
)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
),
active = list(
a_field = function(value) {
if (missing(value)) {
private$..a_field
} else {
private$..a_field <- value
}
)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
)
)
?R6Class
install.packages("R6")
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
),
active = list(
a_field = function(value) {
if (missing(value)) {
private$..a_field
} else {
private$..a_field <- value
}
)
)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
)
)
library("R6")
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
),
active = list(
a_field = function(value) {
if (missing(value)) {
private$..a_field
} else {
private$..a_field <- value
}
)
)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
)
)
Thing_factory <- R6Class(
"Thing",
private = list(
..a_field = "a value",
..another_field = 123
),
active = list(
a_field = function(value) {
if(missing(value)) {
private$..a_field
} else {
private$..a_field <- value
}
}
)
)
View(Thing_factory)
thing1 <- Thing_factory.new()
thing2 <- Thing_factory.new()
thing1 <- Thing_factory$new()
thing2 <- Thing_factory$new()
thing1$a_field <- "stupid"
thing1$a_field
thing2$a_field
thing1 <- thing2
thing1$a_field
thing3 <- thing1
thing1$a_field <- "stupid"
thing3$a_field
thing1 <- thing2
thing3 <- thing1$clone
thing1$a_field
thing1 <- thing2
thing1$a_field
thing2 <- Thing_factory$new()
thing2$a_field
thing1 <- thing2
thing1$a_field
thing3 <- thing1$clone
thing3$a_field
thing3 <- thing1$clone()
thing3$a_field
thing1$a_field <- "stupid"
thing3$a_field
thing1 <- thing2
thing1$a_field
thing1 <- thing2
thing1$a_field
thing1 <- Thing_factory$new()
thing2 <- Thing_factory$new()
thing1$a_field
thing3 <- thing1$clone()
thing3$a_field
thing1$a_field <- "stupid"
thing1$a_field
thing3$a_field
library("here")
library("tidyverse")
library("phyloseq")
library("RColorBrewer")
library("vegan")
library("gridExtra")
library("knitr")
library("DESeq2")
library("plotly")
library("microbiome")
library("ggpubr")
library("randomForest")
library("data.table")
library("corrplot")
library("dplyr")
library("ggrepel")
library("scales")
library("picante")
library("reshape2")
source(here("shared_R_scripts", "16s_HelperFunctions.R"))
source(here("shared_R_scripts", "DESeq2_Helper_Functions.R"))
# Read in physeq object and mapping file
physeqRaw <- readRDS(here("..", "data", "ps0.rdp_single.RDS"))
mappingFile <- import_qiime_sample_data(here("..",
"documents",
"Baldridge_V4_NM_2018_01_02_mappingFile.txt"))
physeqRaw
# Merge physeq object with mapping file
physeqMerged <- merge_phyloseq(physeqRaw, mappingFile)
# Remove the B6 mouse (samples should drop to 84)
physeqMerged <- physeqMerged %>%
subset_samples(Genotype != "B6") %>%
RemoveMissingTaxa()
# Check merged phyloseq object:
physeqMerged
CheckPhyloseqObject(physeqMerged)
# Re-order Treatment:
#   No_Antibiotics, Antibiotics, Antibiotics_Removed
sample_data(physeqMerged)$Treatment <- factor(sample_data(physeqMerged)$Treatment,
levels = c("NoAbx",
"Abx",
"AbxRemoved"))
#levels(sample_data(physeqMerged)$Treatment)
# Change the labels for Treatment
sample_data(physeqMerged)$Treatment <- factor(sample_data(physeqMerged)$Treatment,
labels = c("No_Antibiotics",
"Antibiotics",
"Antibiotics_Removed"))
levels(sample_data(physeqMerged)$Treatment)
# Change order of Genotypes:
#   wt, dnko
sample_data(physeqMerged)$Genotype <- factor(sample_data(physeqMerged)$Genotype,
levels = c("wt","dnko"))
levels(sample_data(physeqMerged)$Genotype)
# Total reads per RSV:
readsPerType.df <- data.frame(nreads = sort(taxa_sums(physeqMerged),
decreasing = TRUE),
sorted = 1:ntaxa(physeqMerged),
type = "RSVs")
# Add the total reads per sample to the data frame:
readsPerType.df <- rbind(readsPerType.df,
data.frame(nreads = sort(sample_sums(physeqMerged),
decreasing = TRUE),
sorted = 1:nsamples(physeqMerged),
type = "Samples"))
# Create a data frame with just the number of reads per sample:
readsPerSample.df <- data.frame(sum = sample_sums(physeqMerged))
View(readsPerSample.df)
View(readsPerType.df)
class(readsPerSample.df)
summary(readsPerSample.df)
# Check the number of samples at various read depths:
readDepth.hist <- ggplot(readsPerSample.df, aes(x = sum)) +
geom_histogram(color = "black", fill = "firebrick3", binwidth = 5000) +
ggtitle("Distribution of Sample Sequencing Depth") +
xlab("Total Reads") +
ylab("Number of Samples") +
theme(plot.title = element_text(hjust = 0.5, size = 12))
readDepth.hist
summary(sample_sums(physeqMerged))
source(here("shared_R_scripts", "16s_HelperFunctions.R"))
readSummary <- GenerateReadSummary(physeqMerged)
View(readSummary)
# Check the number of samples at various read depths:
readDepth.hist <- ggplot(readsPerSample.df, aes(x = sum)) +
geom_histogram(color = "black", fill = "firebrick3", binwidth = 5000) +
ggtitle("Distribution of Sample Sequencing Depth") +
xlab("Total Reads") +
ylab("Number of Samples") +
theme(plot.title = element_text(hjust = 0.5, size = 12))
readDepth.hist
readDepth2 <- ggplot(readsSummary$readsPerSample, aes(x = sum)) +
geom_histogram(color = "black", fill = "firebrick3", binwidth = 5000) +
ggtitle("Distribution of Sample Sequencing Depth") +
xlab("Total Reads") +
ylab("Number of Samples") +
theme(plot.title = element_text(hjust = 0.5, size = 12))
# Check the number of samples at various read depths:
readDepth.hist <- ggplot(readsPerSample.df, aes(x = sum)) +
geom_histogram(color = "black", fill = "firebrick3", binwidth = 5000) +
ggtitle("Distribution of Sample Sequencing Depth") +
xlab("Total Reads") +
ylab("Number of Samples") +
theme(plot.title = element_text(hjust = 0.5, size = 12))
readDepth.hist
readDepth2 <- ggplot(readSummary$readsPerSample, aes(x = sum)) +
geom_histogram(color = "black", fill = "firebrick3", binwidth = 5000) +
ggtitle("Distribution of Sample Sequencing Depth") +
xlab("Total Reads") +
ylab("Number of Samples") +
theme(plot.title = element_text(hjust = 0.5, size = 12))
readDepth2
summary(sample_sums(physeqMerged))
readSummary$readDistributionSummary
c(TRUE, FALSE)
c(TRUE, FALSE) || c(FALSE, FALSE)
a <- list(a = 1:3, b = "a string", c = pi, d = list(-1, -5))
a[1:2]
a[[1]]
a[1]
str(a[1])
a[[1]]
str(a[[1]])
class(a[1])
class(a[[1]])
a[1]
str(a[1])
class(a[1])
a[2]
str(a[2])
class(a[2])
class(a[[2]])
a[[2]]
a[2]
a[[2]]
str(a[[2]])
str(a[2])
class(a[[2]])
str(a[1:2])
str(a[4])
str(a[[4]])
a[1][1]
a[1][2]
a[1]
a[[4]][1]
str(a[[4]][1])
str(a[[4]][[1]])
?matrix
install.packages("shiny")
shiny::runGitHub("shiny-phyloseq", "joey711")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
shiny::runGitHub("shiny-phyloseq", "joey711")
library(ggplot2)
library(ggplot2)
plots <- cyl %>%
map(~ ggplot(., aes(mpg, wt)) + geom_point())
library(purrr)
library(purrr)
library(ggplot2)
cyl
plots <- cyl %>% map(~ ggplot(., aes(mpg, wt)) + geom_point())
# Plot with a message before the plot.
plotMsg <- function(x, y, ...) {
cat("Plotting", length(x), "data points!\n")
plot(x, y, ...)
}
plotMsg(1:10, 1:10, main = "My plot")
nchar("Some text")
strsplit("Some text", " ")
strsplit("Some text", "")
unique(c(1, 1, 2, 2, 3))
unique(c("a", "b", "a"))
grep("[AT]+", c("CGC", "TAT", "TATCATA"))
sub("[AT]+", "-", c("CGC", "TAT", "TATCATA"))
?chartr
chartr("TA", "AT", "TATCTA")
rev(c("TAT", "ATT", "TTT"))
?paste
paste(c("A", "T", "A"), collapse = "")
area <- function(x1, y1, x2, y2) {
abs(x2 - x1)*abs(y2 - y1)
}
area(0, 0, 5, 5)
}
area <- function(x1, y1, x2, y2) {
abs(x2 - x1)*abs(y2 - y1)
}
area(0, 0, 5, 5)
?setClass
setGeneric
?setGeneric
setClass("Rectangle",
representation = representation(
x1 = "numeric",
y1 = "numeric",
x2 = "numeric",
y2 = "numeric")
)
setGeneric("area",
function(obj) standardGeneric("area"))
setClass("Rectangle",
representation = representation(
x1 = "numeric",
y1 = "numeric",
x2 = "numeric",
y2 = "numeric")
)
setGeneric("area",
function(obj) standardGeneric("area"))
setMethod("area", "Rectangle", function(obj) {
abs(obj@x2 - obj@x1) * abs(obj@y2 - obj@y1)
})
rect = new("Rectangle, x1 = 0, y1 = 0, x2 = 5, y2 = 5")
rect = new("Rectangle", x1 = 0, y1 = 0, x2 = 5, y2 = 5)
area(rect)
area <- function(x1, y1, x2, y2) {
abs(x2 - x1)*abs(y2 - y1)
}
area(0, 0, 5, 5)
?area
?setMethod
genseq <- new("GenericSeq",
id = "sequence name",
sequence = "AGATACCCCGAAACGA",
alphabet = c("A", "C", "G", "T"))
setClass("GenericSeq",
representation = representation(
id = "character",
sequence = "character",
alphabet = "character"
))
genseq <- new("GenericSeq",
id = "sequence name",
sequence = "AGATACCCCGAAACGA",
alphabet = c("A", "C", "G", "T"))
setwd("C:/Users/rache/Desktop/Projects/shared_R_scripts")
